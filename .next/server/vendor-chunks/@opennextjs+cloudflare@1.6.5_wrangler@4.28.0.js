"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0";
exports.ids = ["vendor-chunks/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCloudflareContext: () => (/* binding */ getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* binding */ initOpenNextCloudflareForDev)\n/* harmony export */ });\n/**\n * Symbol used as an index in the global scope to set and retrieve the Cloudflare context\n *\n * This is used both in production (in the actual built worker) and in development (`next dev`)\n *\n * Note: this symbol needs to be kept in sync with the one used in `src/cli/templates/worker.ts`\n */\nconst cloudflareContextSymbol = Symbol.for(\"__cloudflare-context__\");\nfunction getCloudflareContext(options = { async: false }) {\n    return options.async ? getCloudflareContextAsync() : getCloudflareContextSync();\n}\n/**\n * Get the cloudflare context from the current global scope\n */\nfunction getCloudflareContextFromGlobalScope() {\n    const global = globalThis;\n    return global[cloudflareContextSymbol];\n}\n/**\n * Detects whether the current code is being evaluated in a statically generated route\n */\nfunction inSSG() {\n    const global = globalThis;\n    // Note: Next.js sets globalThis.__NEXT_DATA__.nextExport to true for SSG routes\n    // source: https://github.com/vercel/next.js/blob/4e394608423/packages/next/src/export/worker.ts#L55-L57)\n    return global.__NEXT_DATA__?.nextExport === true;\n}\n/**\n * Utility to get the current Cloudflare context in sync mode\n */\nfunction getCloudflareContextSync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // The sync mode of `getCloudflareContext`, relies on the context being set on the global state\n    // by either the worker entrypoint (in prod) or by `initOpenNextCloudflareForDev` (in dev), neither\n    // can work during SSG since for SSG Next.js creates (jest) workers that don't get access to the\n    // normal global state so we throw with a helpful error message.\n    if (inSSG()) {\n        throw new Error(`\\n\\nERROR: \\`getCloudflareContext\\` has been called in sync mode in either a static route or at the top level of a non-static one,` +\n            ` both cases are not allowed but can be solved by either:\\n` +\n            `  - make sure that the call is not at the top level and that the route is not static\\n` +\n            `  - call \\`getCloudflareContext({async: true})\\` to use the \\`async\\` mode\\n` +\n            `  - avoid calling \\`getCloudflareContext\\` in the route\\n`);\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Utility to get the current Cloudflare context in async mode\n */\nasync function getCloudflareContextAsync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // Note: Next.js sets process.env.NEXT_RUNTIME to 'nodejs' when the runtime in use is the node.js one\n    // We want to detect when the runtime is the node.js one so that during development (`next dev`) we know wether\n    // we are or not in a node.js process and that access to wrangler's node.js apis\n    const inNodejsRuntime = \"nodejs\" === \"nodejs\";\n    if (inNodejsRuntime || inSSG()) {\n        // we're in a node.js process and also in \"async mode\" so we can use wrangler to asynchronously get the context\n        const cloudflareContext = await getCloudflareContextFromWrangler();\n        addCloudflareContextToNodejsGlobal(cloudflareContext);\n        return cloudflareContext;\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)\n * with the open-next Cloudflare adapter\n *\n * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed\n * @param options options on how the function should operate and if/where to persist the platform data\n */\nasync function initOpenNextCloudflareForDev(options) {\n    const shouldInitializationRun = shouldContextInitializationRun();\n    if (!shouldInitializationRun)\n        return;\n    if (options?.environment && process.env.NEXT_DEV_WRANGLER_ENV) {\n        console.warn(`'initOpenNextCloudflareForDev' has been called with an environment option while NEXT_DEV_WRANGLER_ENV is set.` +\n            ` NEXT_DEV_WRANGLER_ENV will be ignored and the environment will be set to: '${options.environment}'`);\n    }\n    const context = await getCloudflareContextFromWrangler(options);\n    addCloudflareContextToNodejsGlobal(context);\n    await monkeyPatchVmModuleEdgeContext(context);\n}\n/**\n * Next dev server imports the config file twice (in two different processes, making it hard to track),\n * this causes the initialization to run twice as well, to keep things clean, not allocate extra\n * resources (i.e. instantiate two miniflare instances) and avoid extra potential logs, it would be best\n * to run the initialization only once, this function is used to try to make it so that it does, it returns\n * a flag which indicates if the initialization should run in the current process or not.\n *\n * @returns boolean indicating if the initialization should run\n */\nfunction shouldContextInitializationRun() {\n    // via debugging we've seen that AsyncLocalStorage is only set in one of the\n    // two processes so we're using it as the differentiator between the two\n    const AsyncLocalStorage = globalThis[\"AsyncLocalStorage\"];\n    return !!AsyncLocalStorage;\n}\n/**\n * Adds the cloudflare context to the global scope of the current node.js process, enabling\n * future calls to `getCloudflareContext` to retrieve and return such context\n *\n * @param cloudflareContext the cloudflare context to add to the node.sj global scope\n */\nfunction addCloudflareContextToNodejsGlobal(cloudflareContext) {\n    const global = globalThis;\n    global[cloudflareContextSymbol] = cloudflareContext;\n}\n/**\n * Next.js uses the Node.js vm module's `runInContext()` function to evaluate edge functions\n * in a runtime context that tries to simulate as accurately as possible the actual production runtime\n * behavior, see: https://github.com/vercel/next.js/blob/9a1cd3/packages/next/src/server/web/sandbox/context.ts#L525-L527\n *\n * This function monkey-patches the Node.js `vm` module to override the `runInContext()` function so that the\n * cloudflare context is added to the runtime context's global scope before edge functions are evaluated\n *\n * @param cloudflareContext the cloudflare context to patch onto the \"edge\" runtime context global scope\n */\nasync function monkeyPatchVmModuleEdgeContext(cloudflareContext) {\n    const require = (await import(/* webpackIgnore: true */ `${\"__module\".replaceAll(\"_\", \"\")}`)).default.createRequire(\"file:///C:/Users/Admin/Desktop/new/cloudflare-workers-nextjs-saas-template/node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n    // eslint-disable-next-line unicorn/prefer-node-protocol -- the `next dev` compiler doesn't accept the node prefix\n    const vmModule = require(\"vm\");\n    const originalRunInContext = vmModule.runInContext.bind(vmModule);\n    vmModule.runInContext = (code, contextifiedObject, options) => {\n        const runtimeContext = contextifiedObject;\n        runtimeContext[cloudflareContextSymbol] ??= cloudflareContext;\n        return originalRunInContext(code, contextifiedObject, options);\n    };\n}\n/**\n * Gets a cloudflare context object from wrangler\n *\n * @returns the cloudflare context ready for use\n */\nasync function getCloudflareContextFromWrangler(options) {\n    // Note: we never want wrangler to be bundled in the Next.js app, that's why the import below looks like it does\n    const { getPlatformProxy } = await import(/* webpackIgnore: true */ `${\"__wrangler\".replaceAll(\"_\", \"\")}`);\n    // This allows the selection of a wrangler environment while running in next dev mode\n    const environment = options?.environment ?? process.env.NEXT_DEV_WRANGLER_ENV;\n    const { env, cf, ctx } = await getPlatformProxy({\n        ...options,\n        environment,\n    });\n    return {\n        env,\n        cf: cf,\n        ctx: ctx,\n    };\n}\n// In production the cloudflare context is initialized by the worker so it is always available.\n// During local development (`next dev`) it might be missing only if the developers hasn't called\n// the `initOpenNextCloudflareForDev` function in their Next.js config file\nconst initOpenNextCloudflareForDevErrorMsg = `\\n\\nERROR: \\`getCloudflareContext\\` has been called without having called` +\n    ` \\`initOpenNextCloudflareForDev\\` from the Next.js config file.\\n` +\n    `You should update your Next.js config file as shown below:\\n\\n` +\n    \"   ```\\n   // next.config.mjs\\n\\n\" +\n    `   import { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\\n\\n` +\n    `   initOpenNextCloudflareForDev();\\n\\n` +\n    \"   const nextConfig = { ... };\\n\" +\n    \"   export default nextConfig;\\n\" +\n    \"   ```\\n\" +\n    \"\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* binding */ defineCloudflareConfig),\n/* harmony export */   getDeploymentId: () => (/* binding */ getDeploymentId),\n/* harmony export */   getOpenNextConfig: () => (/* binding */ getOpenNextConfig)\n/* harmony export */ });\n/* harmony import */ var _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overrides/asset-resolver/index.js */ \"(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\");\n\n/**\n * Defines the OpenNext configuration that targets the Cloudflare adapter\n *\n * @param config options that enabled you to configure the application's behavior\n * @returns the OpenNext configuration object\n */\nfunction defineCloudflareConfig(config = {}) {\n    const { incrementalCache, tagCache, queue, cachePurge, enableCacheInterception = false, routePreloadingBehavior = \"none\", } = config;\n    return {\n        default: {\n            override: {\n                wrapper: \"cloudflare-node\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n                cdnInvalidation: resolveCdnInvalidation(cachePurge),\n            },\n            routePreloadingBehavior,\n        },\n        // node:crypto is used to compute cache keys\n        edgeExternals: [\"node:crypto\"],\n        cloudflare: {\n            useWorkerdCondition: true,\n        },\n        dangerous: {\n            enableCacheInterception,\n        },\n        middleware: {\n            external: true,\n            override: {\n                wrapper: \"cloudflare-edge\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n            },\n            assetResolver: () => _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        },\n    };\n}\nfunction resolveIncrementalCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveTagCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveQueue(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveCdnInvalidation(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\n/**\n * @param buildOpts build options from AWS\n * @returns The OpenConfig specific to cloudflare\n */\nfunction getOpenNextConfig(buildOpts) {\n    return buildOpts.config;\n}\n/**\n * @returns Unique deployment ID\n */\nfunction getDeploymentId() {\n    return `dpl-${new Date().getTime().toString(36)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMC9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkM7QUFDbEQsWUFBWSxvSEFBb0g7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsaUNBQWlDLDBFQUFhO0FBQzlDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixrQ0FBa0M7QUFDcEQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXERlc2t0b3BcXG5ld1xcY2xvdWRmbGFyZS13b3JrZXJzLW5leHRqcy1zYWFzLXRlbXBsYXRlXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMFxcbm9kZV9tb2R1bGVzXFxAb3Blbm5leHRqc1xcY2xvdWRmbGFyZVxcZGlzdFxcYXBpXFxjb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2V0UmVzb2x2ZXIgZnJvbSBcIi4vb3ZlcnJpZGVzL2Fzc2V0LXJlc29sdmVyL2luZGV4LmpzXCI7XG4vKipcbiAqIERlZmluZXMgdGhlIE9wZW5OZXh0IGNvbmZpZ3VyYXRpb24gdGhhdCB0YXJnZXRzIHRoZSBDbG91ZGZsYXJlIGFkYXB0ZXJcbiAqXG4gKiBAcGFyYW0gY29uZmlnIG9wdGlvbnMgdGhhdCBlbmFibGVkIHlvdSB0byBjb25maWd1cmUgdGhlIGFwcGxpY2F0aW9uJ3MgYmVoYXZpb3JcbiAqIEByZXR1cm5zIHRoZSBPcGVuTmV4dCBjb25maWd1cmF0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lQ2xvdWRmbGFyZUNvbmZpZyhjb25maWcgPSB7fSkge1xuICAgIGNvbnN0IHsgaW5jcmVtZW50YWxDYWNoZSwgdGFnQ2FjaGUsIHF1ZXVlLCBjYWNoZVB1cmdlLCBlbmFibGVDYWNoZUludGVyY2VwdGlvbiA9IGZhbHNlLCByb3V0ZVByZWxvYWRpbmdCZWhhdmlvciA9IFwibm9uZVwiLCB9ID0gY29uZmlnO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiB7XG4gICAgICAgICAgICAgICAgd3JhcHBlcjogXCJjbG91ZGZsYXJlLW5vZGVcIixcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZXI6IFwiZWRnZVwiLFxuICAgICAgICAgICAgICAgIHByb3h5RXh0ZXJuYWxSZXF1ZXN0OiBcImZldGNoXCIsXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50YWxDYWNoZTogcmVzb2x2ZUluY3JlbWVudGFsQ2FjaGUoaW5jcmVtZW50YWxDYWNoZSksXG4gICAgICAgICAgICAgICAgdGFnQ2FjaGU6IHJlc29sdmVUYWdDYWNoZSh0YWdDYWNoZSksXG4gICAgICAgICAgICAgICAgcXVldWU6IHJlc29sdmVRdWV1ZShxdWV1ZSksXG4gICAgICAgICAgICAgICAgY2RuSW52YWxpZGF0aW9uOiByZXNvbHZlQ2RuSW52YWxpZGF0aW9uKGNhY2hlUHVyZ2UpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvdXRlUHJlbG9hZGluZ0JlaGF2aW9yLFxuICAgICAgICB9LFxuICAgICAgICAvLyBub2RlOmNyeXB0byBpcyB1c2VkIHRvIGNvbXB1dGUgY2FjaGUga2V5c1xuICAgICAgICBlZGdlRXh0ZXJuYWxzOiBbXCJub2RlOmNyeXB0b1wiXSxcbiAgICAgICAgY2xvdWRmbGFyZToge1xuICAgICAgICAgICAgdXNlV29ya2VyZENvbmRpdGlvbjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGFuZ2Vyb3VzOiB7XG4gICAgICAgICAgICBlbmFibGVDYWNoZUludGVyY2VwdGlvbixcbiAgICAgICAgfSxcbiAgICAgICAgbWlkZGxld2FyZToge1xuICAgICAgICAgICAgZXh0ZXJuYWw6IHRydWUsXG4gICAgICAgICAgICBvdmVycmlkZToge1xuICAgICAgICAgICAgICAgIHdyYXBwZXI6IFwiY2xvdWRmbGFyZS1lZGdlXCIsXG4gICAgICAgICAgICAgICAgY29udmVydGVyOiBcImVkZ2VcIixcbiAgICAgICAgICAgICAgICBwcm94eUV4dGVybmFsUmVxdWVzdDogXCJmZXRjaFwiLFxuICAgICAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IHJlc29sdmVJbmNyZW1lbnRhbENhY2hlKGluY3JlbWVudGFsQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHRhZ0NhY2hlOiByZXNvbHZlVGFnQ2FjaGUodGFnQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHF1ZXVlOiByZXNvbHZlUXVldWUocXVldWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzc2V0UmVzb2x2ZXI6ICgpID0+IGFzc2V0UmVzb2x2ZXIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVJbmNyZW1lbnRhbENhY2hlKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlVGFnQ2FjaGUodmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVRdWV1ZSh2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNkbkludmFsaWRhdGlvbih2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuLyoqXG4gKiBAcGFyYW0gYnVpbGRPcHRzIGJ1aWxkIG9wdGlvbnMgZnJvbSBBV1NcbiAqIEByZXR1cm5zIFRoZSBPcGVuQ29uZmlnIHNwZWNpZmljIHRvIGNsb3VkZmxhcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZW5OZXh0Q29uZmlnKGJ1aWxkT3B0cykge1xuICAgIHJldHVybiBidWlsZE9wdHMuY29uZmlnO1xufVxuLyoqXG4gKiBAcmV0dXJucyBVbmlxdWUgZGVwbG95bWVudCBJRFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwbG95bWVudElkKCkge1xuICAgIHJldHVybiBgZHBsLSR7bmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoMzYpfWA7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.defineCloudflareConfig),\n/* harmony export */   getCloudflareContext: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext),\n/* harmony export */   getDeploymentId: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getDeploymentId),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.initOpenNextCloudflareForDev)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloudflare-context.js */ \"(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMC9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0M7QUFDOEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXERlc2t0b3BcXG5ld1xcY2xvdWRmbGFyZS13b3JrZXJzLW5leHRqcy1zYWFzLXRlbXBsYXRlXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMFxcbm9kZV9tb2R1bGVzXFxAb3Blbm5leHRqc1xcY2xvdWRmbGFyZVxcZGlzdFxcYXBpXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jbG91ZGZsYXJlLWNvbnRleHQuanNcIjtcbmV4cG9ydCB7IGRlZmluZUNsb3VkZmxhcmVDb25maWcsIGdldERlcGxveW1lbnRJZCB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isUserWorkerFirst: () => (/* binding */ isUserWorkerFirst)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cloudflare-context.js */ \"(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n\n/**\n * Serves assets when `run_worker_first` is set to true.\n *\n * When `run_worker_first` is `false`, the assets are served directly bypassing Next routing.\n *\n * When it is `true`, assets are served from the routing layer. It should be used when assets\n * should be behind the middleware or when skew protection is enabled.\n *\n * See https://developers.cloudflare.com/workers/static-assets/binding/#run_worker_first\n */\nconst resolver = {\n    name: \"cloudflare-asset-resolver\",\n    async maybeGetAssetResult(event) {\n        const { ASSETS } = (0,_cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext)().env;\n        if (!ASSETS || !isUserWorkerFirst(globalThis.__ASSETS_RUN_WORKER_FIRST__, event.rawPath)) {\n            // Only handle assets when the user worker runs first for the path\n            return undefined;\n        }\n        const { method, headers } = event;\n        if (method !== \"GET\" && method != \"HEAD\") {\n            return undefined;\n        }\n        const url = new URL(event.rawPath, \"https://assets.local\");\n        const response = await ASSETS.fetch(url, {\n            headers,\n            method,\n        });\n        if (response.status === 404) {\n            await response.body?.cancel();\n            return undefined;\n        }\n        return {\n            type: \"core\",\n            statusCode: response.status,\n            headers: Object.fromEntries(response.headers.entries()),\n            // Workers and Node types differ.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            body: response.body || new ReadableStream(),\n            isBase64Encoded: false,\n        };\n    },\n};\n/**\n * @param runWorkerFirst `run_worker_first` config\n * @param pathname pathname of the request\n * @returns Whether the user worker runs first\n */\nfunction isUserWorkerFirst(runWorkerFirst, pathname) {\n    if (!Array.isArray(runWorkerFirst)) {\n        return runWorkerFirst ?? false;\n    }\n    let hasPositiveMatch = false;\n    for (let rule of runWorkerFirst) {\n        let isPositiveRule = true;\n        if (rule.startsWith(\"!\")) {\n            rule = rule.slice(1);\n            isPositiveRule = false;\n        }\n        else if (hasPositiveMatch) {\n            // Do not look for more positive rules once we have a match\n            continue;\n        }\n        // - Escapes special characters\n        // - Replaces * with .*\n        const match = new RegExp(`^${rule.replace(/([[\\]().*+?^$|{}\\\\])/g, \"\\\\$1\").replace(\"\\\\*\", \".*\")}$`).test(pathname);\n        if (match) {\n            if (isPositiveRule) {\n                hasPositiveMatch = true;\n            }\n            else {\n                // Exit early when there is a negative match\n                return false;\n            }\n        }\n    }\n    return hasPositiveMatch;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMC9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9vdmVycmlkZXMvYXNzZXQtcmVzb2x2ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVMsRUFBRSw0RUFBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsOEJBQThCLHFDQUFxQztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5cXERlc2t0b3BcXG5ld1xcY2xvdWRmbGFyZS13b3JrZXJzLW5leHRqcy1zYWFzLXRlbXBsYXRlXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3Blbm5leHRqcytjbG91ZGZsYXJlQDEuNi41X3dyYW5nbGVyQDQuMjguMFxcbm9kZV9tb2R1bGVzXFxAb3Blbm5leHRqc1xcY2xvdWRmbGFyZVxcZGlzdFxcYXBpXFxvdmVycmlkZXNcXGFzc2V0LXJlc29sdmVyXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbG91ZGZsYXJlQ29udGV4dCB9IGZyb20gXCIuLi8uLi9jbG91ZGZsYXJlLWNvbnRleHQuanNcIjtcbi8qKlxuICogU2VydmVzIGFzc2V0cyB3aGVuIGBydW5fd29ya2VyX2ZpcnN0YCBpcyBzZXQgdG8gdHJ1ZS5cbiAqXG4gKiBXaGVuIGBydW5fd29ya2VyX2ZpcnN0YCBpcyBgZmFsc2VgLCB0aGUgYXNzZXRzIGFyZSBzZXJ2ZWQgZGlyZWN0bHkgYnlwYXNzaW5nIE5leHQgcm91dGluZy5cbiAqXG4gKiBXaGVuIGl0IGlzIGB0cnVlYCwgYXNzZXRzIGFyZSBzZXJ2ZWQgZnJvbSB0aGUgcm91dGluZyBsYXllci4gSXQgc2hvdWxkIGJlIHVzZWQgd2hlbiBhc3NldHNcbiAqIHNob3VsZCBiZSBiZWhpbmQgdGhlIG1pZGRsZXdhcmUgb3Igd2hlbiBza2V3IHByb3RlY3Rpb24gaXMgZW5hYmxlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmNsb3VkZmxhcmUuY29tL3dvcmtlcnMvc3RhdGljLWFzc2V0cy9iaW5kaW5nLyNydW5fd29ya2VyX2ZpcnN0XG4gKi9cbmNvbnN0IHJlc29sdmVyID0ge1xuICAgIG5hbWU6IFwiY2xvdWRmbGFyZS1hc3NldC1yZXNvbHZlclwiLFxuICAgIGFzeW5jIG1heWJlR2V0QXNzZXRSZXN1bHQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeyBBU1NFVFMgfSA9IGdldENsb3VkZmxhcmVDb250ZXh0KCkuZW52O1xuICAgICAgICBpZiAoIUFTU0VUUyB8fCAhaXNVc2VyV29ya2VyRmlyc3QoZ2xvYmFsVGhpcy5fX0FTU0VUU19SVU5fV09SS0VSX0ZJUlNUX18sIGV2ZW50LnJhd1BhdGgpKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGhhbmRsZSBhc3NldHMgd2hlbiB0aGUgdXNlciB3b3JrZXIgcnVucyBmaXJzdCBmb3IgdGhlIHBhdGhcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBtZXRob2QsIGhlYWRlcnMgfSA9IGV2ZW50O1xuICAgICAgICBpZiAobWV0aG9kICE9PSBcIkdFVFwiICYmIG1ldGhvZCAhPSBcIkhFQURcIikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGV2ZW50LnJhd1BhdGgsIFwiaHR0cHM6Ly9hc3NldHMubG9jYWxcIik7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQVNTRVRTLmZldGNoKHVybCwge1xuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgYXdhaXQgcmVzcG9uc2UuYm9keT8uY2FuY2VsKCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImNvcmVcIixcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgIGhlYWRlcnM6IE9iamVjdC5mcm9tRW50cmllcyhyZXNwb25zZS5oZWFkZXJzLmVudHJpZXMoKSksXG4gICAgICAgICAgICAvLyBXb3JrZXJzIGFuZCBOb2RlIHR5cGVzIGRpZmZlci5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBib2R5OiByZXNwb25zZS5ib2R5IHx8IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgICAgICAgICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9LFxufTtcbi8qKlxuICogQHBhcmFtIHJ1bldvcmtlckZpcnN0IGBydW5fd29ya2VyX2ZpcnN0YCBjb25maWdcbiAqIEBwYXJhbSBwYXRobmFtZSBwYXRobmFtZSBvZiB0aGUgcmVxdWVzdFxuICogQHJldHVybnMgV2hldGhlciB0aGUgdXNlciB3b3JrZXIgcnVucyBmaXJzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyV29ya2VyRmlyc3QocnVuV29ya2VyRmlyc3QsIHBhdGhuYW1lKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHJ1bldvcmtlckZpcnN0KSkge1xuICAgICAgICByZXR1cm4gcnVuV29ya2VyRmlyc3QgPz8gZmFsc2U7XG4gICAgfVxuICAgIGxldCBoYXNQb3NpdGl2ZU1hdGNoID0gZmFsc2U7XG4gICAgZm9yIChsZXQgcnVsZSBvZiBydW5Xb3JrZXJGaXJzdCkge1xuICAgICAgICBsZXQgaXNQb3NpdGl2ZVJ1bGUgPSB0cnVlO1xuICAgICAgICBpZiAocnVsZS5zdGFydHNXaXRoKFwiIVwiKSkge1xuICAgICAgICAgICAgcnVsZSA9IHJ1bGUuc2xpY2UoMSk7XG4gICAgICAgICAgICBpc1Bvc2l0aXZlUnVsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc1Bvc2l0aXZlTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBsb29rIGZvciBtb3JlIHBvc2l0aXZlIHJ1bGVzIG9uY2Ugd2UgaGF2ZSBhIG1hdGNoXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyAtIEVzY2FwZXMgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAgIC8vIC0gUmVwbGFjZXMgKiB3aXRoIC4qXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbmV3IFJlZ0V4cChgXiR7cnVsZS5yZXBsYWNlKC8oW1tcXF0oKS4qKz9eJHx7fVxcXFxdKS9nLCBcIlxcXFwkMVwiKS5yZXBsYWNlKFwiXFxcXCpcIiwgXCIuKlwiKX0kYCkudGVzdChwYXRobmFtZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGlzUG9zaXRpdmVSdWxlKSB7XG4gICAgICAgICAgICAgICAgaGFzUG9zaXRpdmVNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFeGl0IGVhcmx5IHdoZW4gdGhlcmUgaXMgYSBuZWdhdGl2ZSBtYXRjaFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzUG9zaXRpdmVNYXRjaDtcbn1cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCloudflareContext: () => (/* binding */ getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* binding */ initOpenNextCloudflareForDev)\n/* harmony export */ });\n/**\n * Symbol used as an index in the global scope to set and retrieve the Cloudflare context\n *\n * This is used both in production (in the actual built worker) and in development (`next dev`)\n *\n * Note: this symbol needs to be kept in sync with the one used in `src/cli/templates/worker.ts`\n */\nconst cloudflareContextSymbol = Symbol.for(\"__cloudflare-context__\");\nfunction getCloudflareContext(options = { async: false }) {\n    return options.async ? getCloudflareContextAsync() : getCloudflareContextSync();\n}\n/**\n * Get the cloudflare context from the current global scope\n */\nfunction getCloudflareContextFromGlobalScope() {\n    const global = globalThis;\n    return global[cloudflareContextSymbol];\n}\n/**\n * Detects whether the current code is being evaluated in a statically generated route\n */\nfunction inSSG() {\n    const global = globalThis;\n    // Note: Next.js sets globalThis.__NEXT_DATA__.nextExport to true for SSG routes\n    // source: https://github.com/vercel/next.js/blob/4e394608423/packages/next/src/export/worker.ts#L55-L57)\n    return global.__NEXT_DATA__?.nextExport === true;\n}\n/**\n * Utility to get the current Cloudflare context in sync mode\n */\nfunction getCloudflareContextSync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // The sync mode of `getCloudflareContext`, relies on the context being set on the global state\n    // by either the worker entrypoint (in prod) or by `initOpenNextCloudflareForDev` (in dev), neither\n    // can work during SSG since for SSG Next.js creates (jest) workers that don't get access to the\n    // normal global state so we throw with a helpful error message.\n    if (inSSG()) {\n        throw new Error(`\\n\\nERROR: \\`getCloudflareContext\\` has been called in sync mode in either a static route or at the top level of a non-static one,` +\n            ` both cases are not allowed but can be solved by either:\\n` +\n            `  - make sure that the call is not at the top level and that the route is not static\\n` +\n            `  - call \\`getCloudflareContext({async: true})\\` to use the \\`async\\` mode\\n` +\n            `  - avoid calling \\`getCloudflareContext\\` in the route\\n`);\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Utility to get the current Cloudflare context in async mode\n */\nasync function getCloudflareContextAsync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // Note: Next.js sets process.env.NEXT_RUNTIME to 'nodejs' when the runtime in use is the node.js one\n    // We want to detect when the runtime is the node.js one so that during development (`next dev`) we know wether\n    // we are or not in a node.js process and that access to wrangler's node.js apis\n    const inNodejsRuntime = \"nodejs\" === \"nodejs\";\n    if (inNodejsRuntime || inSSG()) {\n        // we're in a node.js process and also in \"async mode\" so we can use wrangler to asynchronously get the context\n        const cloudflareContext = await getCloudflareContextFromWrangler();\n        addCloudflareContextToNodejsGlobal(cloudflareContext);\n        return cloudflareContext;\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)\n * with the open-next Cloudflare adapter\n *\n * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed\n * @param options options on how the function should operate and if/where to persist the platform data\n */\nasync function initOpenNextCloudflareForDev(options) {\n    const shouldInitializationRun = shouldContextInitializationRun();\n    if (!shouldInitializationRun)\n        return;\n    if (options?.environment && process.env.NEXT_DEV_WRANGLER_ENV) {\n        console.warn(`'initOpenNextCloudflareForDev' has been called with an environment option while NEXT_DEV_WRANGLER_ENV is set.` +\n            ` NEXT_DEV_WRANGLER_ENV will be ignored and the environment will be set to: '${options.environment}'`);\n    }\n    const context = await getCloudflareContextFromWrangler(options);\n    addCloudflareContextToNodejsGlobal(context);\n    await monkeyPatchVmModuleEdgeContext(context);\n}\n/**\n * Next dev server imports the config file twice (in two different processes, making it hard to track),\n * this causes the initialization to run twice as well, to keep things clean, not allocate extra\n * resources (i.e. instantiate two miniflare instances) and avoid extra potential logs, it would be best\n * to run the initialization only once, this function is used to try to make it so that it does, it returns\n * a flag which indicates if the initialization should run in the current process or not.\n *\n * @returns boolean indicating if the initialization should run\n */\nfunction shouldContextInitializationRun() {\n    // via debugging we've seen that AsyncLocalStorage is only set in one of the\n    // two processes so we're using it as the differentiator between the two\n    const AsyncLocalStorage = globalThis[\"AsyncLocalStorage\"];\n    return !!AsyncLocalStorage;\n}\n/**\n * Adds the cloudflare context to the global scope of the current node.js process, enabling\n * future calls to `getCloudflareContext` to retrieve and return such context\n *\n * @param cloudflareContext the cloudflare context to add to the node.sj global scope\n */\nfunction addCloudflareContextToNodejsGlobal(cloudflareContext) {\n    const global = globalThis;\n    global[cloudflareContextSymbol] = cloudflareContext;\n}\n/**\n * Next.js uses the Node.js vm module's `runInContext()` function to evaluate edge functions\n * in a runtime context that tries to simulate as accurately as possible the actual production runtime\n * behavior, see: https://github.com/vercel/next.js/blob/9a1cd3/packages/next/src/server/web/sandbox/context.ts#L525-L527\n *\n * This function monkey-patches the Node.js `vm` module to override the `runInContext()` function so that the\n * cloudflare context is added to the runtime context's global scope before edge functions are evaluated\n *\n * @param cloudflareContext the cloudflare context to patch onto the \"edge\" runtime context global scope\n */\nasync function monkeyPatchVmModuleEdgeContext(cloudflareContext) {\n    const require = (await import(/* webpackIgnore: true */ `${\"__module\".replaceAll(\"_\", \"\")}`)).default.createRequire(\"file:///C:/Users/Admin/Desktop/new/cloudflare-workers-nextjs-saas-template/node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n    // eslint-disable-next-line unicorn/prefer-node-protocol -- the `next dev` compiler doesn't accept the node prefix\n    const vmModule = require(\"vm\");\n    const originalRunInContext = vmModule.runInContext.bind(vmModule);\n    vmModule.runInContext = (code, contextifiedObject, options) => {\n        const runtimeContext = contextifiedObject;\n        runtimeContext[cloudflareContextSymbol] ??= cloudflareContext;\n        return originalRunInContext(code, contextifiedObject, options);\n    };\n}\n/**\n * Gets a cloudflare context object from wrangler\n *\n * @returns the cloudflare context ready for use\n */\nasync function getCloudflareContextFromWrangler(options) {\n    // Note: we never want wrangler to be bundled in the Next.js app, that's why the import below looks like it does\n    const { getPlatformProxy } = await import(/* webpackIgnore: true */ `${\"__wrangler\".replaceAll(\"_\", \"\")}`);\n    // This allows the selection of a wrangler environment while running in next dev mode\n    const environment = options?.environment ?? process.env.NEXT_DEV_WRANGLER_ENV;\n    const { env, cf, ctx } = await getPlatformProxy({\n        ...options,\n        environment,\n    });\n    return {\n        env,\n        cf: cf,\n        ctx: ctx,\n    };\n}\n// In production the cloudflare context is initialized by the worker so it is always available.\n// During local development (`next dev`) it might be missing only if the developers hasn't called\n// the `initOpenNextCloudflareForDev` function in their Next.js config file\nconst initOpenNextCloudflareForDevErrorMsg = `\\n\\nERROR: \\`getCloudflareContext\\` has been called without having called` +\n    ` \\`initOpenNextCloudflareForDev\\` from the Next.js config file.\\n` +\n    `You should update your Next.js config file as shown below:\\n\\n` +\n    \"   ```\\n   // next.config.mjs\\n\\n\" +\n    `   import { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\\n\\n` +\n    `   initOpenNextCloudflareForDev();\\n\\n` +\n    \"   const nextConfig = { ... };\\n\" +\n    \"   export default nextConfig;\\n\" +\n    \"   ```\\n\" +\n    \"\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* binding */ defineCloudflareConfig),\n/* harmony export */   getDeploymentId: () => (/* binding */ getDeploymentId),\n/* harmony export */   getOpenNextConfig: () => (/* binding */ getOpenNextConfig)\n/* harmony export */ });\n/* harmony import */ var _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overrides/asset-resolver/index.js */ \"(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\");\n\n/**\n * Defines the OpenNext configuration that targets the Cloudflare adapter\n *\n * @param config options that enabled you to configure the application's behavior\n * @returns the OpenNext configuration object\n */\nfunction defineCloudflareConfig(config = {}) {\n    const { incrementalCache, tagCache, queue, cachePurge, enableCacheInterception = false, routePreloadingBehavior = \"none\", } = config;\n    return {\n        default: {\n            override: {\n                wrapper: \"cloudflare-node\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n                cdnInvalidation: resolveCdnInvalidation(cachePurge),\n            },\n            routePreloadingBehavior,\n        },\n        // node:crypto is used to compute cache keys\n        edgeExternals: [\"node:crypto\"],\n        cloudflare: {\n            useWorkerdCondition: true,\n        },\n        dangerous: {\n            enableCacheInterception,\n        },\n        middleware: {\n            external: true,\n            override: {\n                wrapper: \"cloudflare-edge\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n            },\n            assetResolver: () => _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        },\n    };\n}\nfunction resolveIncrementalCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveTagCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveQueue(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveCdnInvalidation(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\n/**\n * @param buildOpts build options from AWS\n * @returns The OpenConfig specific to cloudflare\n */\nfunction getOpenNextConfig(buildOpts) {\n    return buildOpts.config;\n}\n/**\n * @returns Unique deployment ID\n */\nfunction getDeploymentId() {\n    return `dpl-${new Date().getTime().toString(36)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjAvbm9kZV9tb2R1bGVzL0BvcGVubmV4dGpzL2Nsb3VkZmxhcmUvZGlzdC9hcGkvY29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMkNBQTJDO0FBQ2xELFlBQVksb0hBQW9IO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGlDQUFpQywwRUFBYTtBQUM5QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0Isa0NBQWtDO0FBQ3BEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxEZXNrdG9wXFxuZXdcXGNsb3VkZmxhcmUtd29ya2Vycy1uZXh0anMtc2Fhcy10ZW1wbGF0ZVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NldFJlc29sdmVyIGZyb20gXCIuL292ZXJyaWRlcy9hc3NldC1yZXNvbHZlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBPcGVuTmV4dCBjb25maWd1cmF0aW9uIHRoYXQgdGFyZ2V0cyB0aGUgQ2xvdWRmbGFyZSBhZGFwdGVyXG4gKlxuICogQHBhcmFtIGNvbmZpZyBvcHRpb25zIHRoYXQgZW5hYmxlZCB5b3UgdG8gY29uZmlndXJlIHRoZSBhcHBsaWNhdGlvbidzIGJlaGF2aW9yXG4gKiBAcmV0dXJucyB0aGUgT3Blbk5leHQgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUNsb3VkZmxhcmVDb25maWcoY29uZmlnID0ge30pIHtcbiAgICBjb25zdCB7IGluY3JlbWVudGFsQ2FjaGUsIHRhZ0NhY2hlLCBxdWV1ZSwgY2FjaGVQdXJnZSwgZW5hYmxlQ2FjaGVJbnRlcmNlcHRpb24gPSBmYWxzZSwgcm91dGVQcmVsb2FkaW5nQmVoYXZpb3IgPSBcIm5vbmVcIiwgfSA9IGNvbmZpZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvdmVycmlkZToge1xuICAgICAgICAgICAgICAgIHdyYXBwZXI6IFwiY2xvdWRmbGFyZS1ub2RlXCIsXG4gICAgICAgICAgICAgICAgY29udmVydGVyOiBcImVkZ2VcIixcbiAgICAgICAgICAgICAgICBwcm94eUV4dGVybmFsUmVxdWVzdDogXCJmZXRjaFwiLFxuICAgICAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IHJlc29sdmVJbmNyZW1lbnRhbENhY2hlKGluY3JlbWVudGFsQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHRhZ0NhY2hlOiByZXNvbHZlVGFnQ2FjaGUodGFnQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHF1ZXVlOiByZXNvbHZlUXVldWUocXVldWUpLFxuICAgICAgICAgICAgICAgIGNkbkludmFsaWRhdGlvbjogcmVzb2x2ZUNkbkludmFsaWRhdGlvbihjYWNoZVB1cmdlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3V0ZVByZWxvYWRpbmdCZWhhdmlvcixcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbm9kZTpjcnlwdG8gaXMgdXNlZCB0byBjb21wdXRlIGNhY2hlIGtleXNcbiAgICAgICAgZWRnZUV4dGVybmFsczogW1wibm9kZTpjcnlwdG9cIl0sXG4gICAgICAgIGNsb3VkZmxhcmU6IHtcbiAgICAgICAgICAgIHVzZVdvcmtlcmRDb25kaXRpb246IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRhbmdlcm91czoge1xuICAgICAgICAgICAgZW5hYmxlQ2FjaGVJbnRlcmNlcHRpb24sXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZXdhcmU6IHtcbiAgICAgICAgICAgIGV4dGVybmFsOiB0cnVlLFxuICAgICAgICAgICAgb3ZlcnJpZGU6IHtcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiBcImNsb3VkZmxhcmUtZWRnZVwiLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlcjogXCJlZGdlXCIsXG4gICAgICAgICAgICAgICAgcHJveHlFeHRlcm5hbFJlcXVlc3Q6IFwiZmV0Y2hcIixcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRhbENhY2hlOiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZShpbmNyZW1lbnRhbENhY2hlKSxcbiAgICAgICAgICAgICAgICB0YWdDYWNoZTogcmVzb2x2ZVRhZ0NhY2hlKHRhZ0NhY2hlKSxcbiAgICAgICAgICAgICAgICBxdWV1ZTogcmVzb2x2ZVF1ZXVlKHF1ZXVlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3NldFJlc29sdmVyOiAoKSA9PiBhc3NldFJlc29sdmVyLFxuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZSh2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhZ0NhY2hlKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlUXVldWUodmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDZG5JbnZhbGlkYXRpb24odmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbi8qKlxuICogQHBhcmFtIGJ1aWxkT3B0cyBidWlsZCBvcHRpb25zIGZyb20gQVdTXG4gKiBAcmV0dXJucyBUaGUgT3BlbkNvbmZpZyBzcGVjaWZpYyB0byBjbG91ZGZsYXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuTmV4dENvbmZpZyhidWlsZE9wdHMpIHtcbiAgICByZXR1cm4gYnVpbGRPcHRzLmNvbmZpZztcbn1cbi8qKlxuICogQHJldHVybnMgVW5pcXVlIGRlcGxveW1lbnQgSURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGxveW1lbnRJZCgpIHtcbiAgICByZXR1cm4gYGRwbC0ke25ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKDM2KX1gO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.defineCloudflareConfig),\n/* harmony export */   getCloudflareContext: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext),\n/* harmony export */   getDeploymentId: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getDeploymentId),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.initOpenNextCloudflareForDev)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloudflare-context.js */ \"(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/config.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjAvbm9kZV9tb2R1bGVzL0BvcGVubmV4dGpzL2Nsb3VkZmxhcmUvZGlzdC9hcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXdDO0FBQzhCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxEZXNrdG9wXFxuZXdcXGNsb3VkZmxhcmUtd29ya2Vycy1uZXh0anMtc2Fhcy10ZW1wbGF0ZVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY2xvdWRmbGFyZS1jb250ZXh0LmpzXCI7XG5leHBvcnQgeyBkZWZpbmVDbG91ZGZsYXJlQ29uZmlnLCBnZXREZXBsb3ltZW50SWQgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isUserWorkerFirst: () => (/* binding */ isUserWorkerFirst)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cloudflare-context.js */ \"(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n\n/**\n * Serves assets when `run_worker_first` is set to true.\n *\n * When `run_worker_first` is `false`, the assets are served directly bypassing Next routing.\n *\n * When it is `true`, assets are served from the routing layer. It should be used when assets\n * should be behind the middleware or when skew protection is enabled.\n *\n * See https://developers.cloudflare.com/workers/static-assets/binding/#run_worker_first\n */\nconst resolver = {\n    name: \"cloudflare-asset-resolver\",\n    async maybeGetAssetResult(event) {\n        const { ASSETS } = (0,_cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext)().env;\n        if (!ASSETS || !isUserWorkerFirst(globalThis.__ASSETS_RUN_WORKER_FIRST__, event.rawPath)) {\n            // Only handle assets when the user worker runs first for the path\n            return undefined;\n        }\n        const { method, headers } = event;\n        if (method !== \"GET\" && method != \"HEAD\") {\n            return undefined;\n        }\n        const url = new URL(event.rawPath, \"https://assets.local\");\n        const response = await ASSETS.fetch(url, {\n            headers,\n            method,\n        });\n        if (response.status === 404) {\n            await response.body?.cancel();\n            return undefined;\n        }\n        return {\n            type: \"core\",\n            statusCode: response.status,\n            headers: Object.fromEntries(response.headers.entries()),\n            // Workers and Node types differ.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            body: response.body || new ReadableStream(),\n            isBase64Encoded: false,\n        };\n    },\n};\n/**\n * @param runWorkerFirst `run_worker_first` config\n * @param pathname pathname of the request\n * @returns Whether the user worker runs first\n */\nfunction isUserWorkerFirst(runWorkerFirst, pathname) {\n    if (!Array.isArray(runWorkerFirst)) {\n        return runWorkerFirst ?? false;\n    }\n    let hasPositiveMatch = false;\n    for (let rule of runWorkerFirst) {\n        let isPositiveRule = true;\n        if (rule.startsWith(\"!\")) {\n            rule = rule.slice(1);\n            isPositiveRule = false;\n        }\n        else if (hasPositiveMatch) {\n            // Do not look for more positive rules once we have a match\n            continue;\n        }\n        // - Escapes special characters\n        // - Replaces * with .*\n        const match = new RegExp(`^${rule.replace(/([[\\]().*+?^$|{}\\\\])/g, \"\\\\$1\").replace(\"\\\\*\", \".*\")}$`).test(pathname);\n        if (match) {\n            if (isPositiveRule) {\n                hasPositiveMatch = true;\n            }\n            else {\n                // Exit early when there is a negative match\n                return false;\n            }\n        }\n    }\n    return hasPositiveMatch;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjAvbm9kZV9tb2R1bGVzL0BvcGVubmV4dGpzL2Nsb3VkZmxhcmUvZGlzdC9hcGkvb3ZlcnJpZGVzL2Fzc2V0LXJlc29sdmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTLEVBQUUsNEVBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtCQUFrQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhCQUE4QixxQ0FBcUM7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxEZXNrdG9wXFxuZXdcXGNsb3VkZmxhcmUtd29ya2Vycy1uZXh0anMtc2Fhcy10ZW1wbGF0ZVxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW5uZXh0anMrY2xvdWRmbGFyZUAxLjYuNV93cmFuZ2xlckA0LjI4LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcb3ZlcnJpZGVzXFxhc3NldC1yZXNvbHZlclxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2xvdWRmbGFyZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vY2xvdWRmbGFyZS1jb250ZXh0LmpzXCI7XG4vKipcbiAqIFNlcnZlcyBhc3NldHMgd2hlbiBgcnVuX3dvcmtlcl9maXJzdGAgaXMgc2V0IHRvIHRydWUuXG4gKlxuICogV2hlbiBgcnVuX3dvcmtlcl9maXJzdGAgaXMgYGZhbHNlYCwgdGhlIGFzc2V0cyBhcmUgc2VydmVkIGRpcmVjdGx5IGJ5cGFzc2luZyBOZXh0IHJvdXRpbmcuXG4gKlxuICogV2hlbiBpdCBpcyBgdHJ1ZWAsIGFzc2V0cyBhcmUgc2VydmVkIGZyb20gdGhlIHJvdXRpbmcgbGF5ZXIuIEl0IHNob3VsZCBiZSB1c2VkIHdoZW4gYXNzZXRzXG4gKiBzaG91bGQgYmUgYmVoaW5kIHRoZSBtaWRkbGV3YXJlIG9yIHdoZW4gc2tldyBwcm90ZWN0aW9uIGlzIGVuYWJsZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5jbG91ZGZsYXJlLmNvbS93b3JrZXJzL3N0YXRpYy1hc3NldHMvYmluZGluZy8jcnVuX3dvcmtlcl9maXJzdFxuICovXG5jb25zdCByZXNvbHZlciA9IHtcbiAgICBuYW1lOiBcImNsb3VkZmxhcmUtYXNzZXQtcmVzb2x2ZXJcIixcbiAgICBhc3luYyBtYXliZUdldEFzc2V0UmVzdWx0KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgQVNTRVRTIH0gPSBnZXRDbG91ZGZsYXJlQ29udGV4dCgpLmVudjtcbiAgICAgICAgaWYgKCFBU1NFVFMgfHwgIWlzVXNlcldvcmtlckZpcnN0KGdsb2JhbFRoaXMuX19BU1NFVFNfUlVOX1dPUktFUl9GSVJTVF9fLCBldmVudC5yYXdQYXRoKSkge1xuICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgYXNzZXRzIHdoZW4gdGhlIHVzZXIgd29ya2VyIHJ1bnMgZmlyc3QgZm9yIHRoZSBwYXRoXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kLCBoZWFkZXJzIH0gPSBldmVudDtcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gXCJHRVRcIiAmJiBtZXRob2QgIT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChldmVudC5yYXdQYXRoLCBcImh0dHBzOi8vYXNzZXRzLmxvY2FsXCIpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFTU0VUUy5mZXRjaCh1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlc3BvbnNlLmJvZHk/LmNhbmNlbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJjb3JlXCIsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXMocmVzcG9uc2UuaGVhZGVycy5lbnRyaWVzKCkpLFxuICAgICAgICAgICAgLy8gV29ya2VycyBhbmQgTm9kZSB0eXBlcyBkaWZmZXIuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keSB8fCBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICAgICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbn07XG4vKipcbiAqIEBwYXJhbSBydW5Xb3JrZXJGaXJzdCBgcnVuX3dvcmtlcl9maXJzdGAgY29uZmlnXG4gKiBAcGFyYW0gcGF0aG5hbWUgcGF0aG5hbWUgb2YgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHVzZXIgd29ya2VyIHJ1bnMgZmlyc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlcldvcmtlckZpcnN0KHJ1bldvcmtlckZpcnN0LCBwYXRobmFtZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShydW5Xb3JrZXJGaXJzdCkpIHtcbiAgICAgICAgcmV0dXJuIHJ1bldvcmtlckZpcnN0ID8/IGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaGFzUG9zaXRpdmVNYXRjaCA9IGZhbHNlO1xuICAgIGZvciAobGV0IHJ1bGUgb2YgcnVuV29ya2VyRmlyc3QpIHtcbiAgICAgICAgbGV0IGlzUG9zaXRpdmVSdWxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHJ1bGUuc3RhcnRzV2l0aChcIiFcIikpIHtcbiAgICAgICAgICAgIHJ1bGUgPSBydWxlLnNsaWNlKDEpO1xuICAgICAgICAgICAgaXNQb3NpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNQb3NpdGl2ZU1hdGNoKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgbG9vayBmb3IgbW9yZSBwb3NpdGl2ZSBydWxlcyBvbmNlIHdlIGhhdmUgYSBtYXRjaFxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gLSBFc2NhcGVzIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgICAgICAvLyAtIFJlcGxhY2VzICogd2l0aCAuKlxuICAgICAgICBjb25zdCBtYXRjaCA9IG5ldyBSZWdFeHAoYF4ke3J1bGUucmVwbGFjZSgvKFtbXFxdKCkuKis/XiR8e31cXFxcXSkvZywgXCJcXFxcJDFcIikucmVwbGFjZShcIlxcXFwqXCIsIFwiLipcIil9JGApLnRlc3QocGF0aG5hbWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpc1Bvc2l0aXZlUnVsZSkge1xuICAgICAgICAgICAgICAgIGhhc1Bvc2l0aXZlTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSB3aGVuIHRoZXJlIGlzIGEgbmVnYXRpdmUgbWF0Y2hcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc1Bvc2l0aXZlTWF0Y2g7XG59XG5leHBvcnQgZGVmYXVsdCByZXNvbHZlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opennextjs+cloudflare@1.6.5_wrangler@4.28.0/node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\n");

/***/ })

};
;