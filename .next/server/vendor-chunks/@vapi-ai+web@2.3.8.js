"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vapi-ai+web@2.3.8";
exports.ids = ["vendor-chunks/@vapi-ai+web@2.3.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/api.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/api.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Api = exports.HttpClient = exports.ContentType = void 0;\nvar ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"JsonApi\"] = \"application/vnd.api+json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n    ContentType[\"Text\"] = \"text/plain\";\n})(ContentType || (exports.ContentType = ContentType = {}));\nclass HttpClient {\n    baseUrl = \"https://api.vapi.ai\";\n    securityData = null;\n    securityWorker;\n    abortControllers = new Map();\n    customFetch = (...fetchParams) => fetch(...fetchParams);\n    baseApiParams = {\n        credentials: \"same-origin\",\n        headers: {},\n        redirect: \"follow\",\n        referrerPolicy: \"no-referrer\",\n    };\n    constructor(apiConfig = {}) {\n        Object.assign(this, apiConfig);\n    }\n    setSecurityData = (data) => {\n        this.securityData = data;\n    };\n    encodeQueryParam(key, value) {\n        const encodedKey = encodeURIComponent(key);\n        return `${encodedKey}=${encodeURIComponent(typeof value === \"number\" ? value : `${value}`)}`;\n    }\n    addQueryParam(query, key) {\n        return this.encodeQueryParam(key, query[key]);\n    }\n    addArrayQueryParam(query, key) {\n        const value = query[key];\n        return value.map((v) => this.encodeQueryParam(key, v)).join(\"&\");\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n        return keys\n            .map((key) => Array.isArray(query[key])\n            ? this.addArrayQueryParam(query, key)\n            : this.addQueryParam(query, key))\n            .join(\"&\");\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : \"\";\n    }\n    contentFormatters = {\n        [ContentType.Json]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\")\n            ? JSON.stringify(input)\n            : input,\n        [ContentType.JsonApi]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\")\n            ? JSON.stringify(input)\n            : input,\n        [ContentType.Text]: (input) => input !== null && typeof input !== \"string\"\n            ? JSON.stringify(input)\n            : input,\n        [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {\n            const property = input[key];\n            formData.append(key, property instanceof Blob\n                ? property\n                : typeof property === \"object\" && property !== null\n                    ? JSON.stringify(property)\n                    : `${property}`);\n            return formData;\n        }, new FormData()),\n        [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n    };\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n    createAbortSignal = (cancelToken) => {\n        if (this.abortControllers.has(cancelToken)) {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                return abortController.signal;\n            }\n            return void 0;\n        }\n        const abortController = new AbortController();\n        this.abortControllers.set(cancelToken, abortController);\n        return abortController.signal;\n    };\n    abortRequest = (cancelToken) => {\n        const abortController = this.abortControllers.get(cancelToken);\n        if (abortController) {\n            abortController.abort();\n            this.abortControllers.delete(cancelToken);\n        }\n    };\n    request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {\n        const secureParams = ((typeof secure === \"boolean\" ? secure : this.baseApiParams.secure) &&\n            this.securityWorker &&\n            (await this.securityWorker(this.securityData))) ||\n            {};\n        const requestParams = this.mergeRequestParams(params, secureParams);\n        const queryString = query && this.toQueryString(query);\n        const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n        const responseFormat = format || requestParams.format;\n        return this.customFetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n            ...requestParams,\n            headers: {\n                ...(requestParams.headers || {}),\n                ...(type && type !== ContentType.FormData\n                    ? { \"Content-Type\": type }\n                    : {}),\n            },\n            signal: (cancelToken\n                ? this.createAbortSignal(cancelToken)\n                : requestParams.signal) || null,\n            body: typeof body === \"undefined\" || body === null\n                ? null\n                : payloadFormatter(body),\n        }).then(async (response) => {\n            const r = response.clone();\n            r.data = null;\n            r.error = null;\n            const data = !responseFormat\n                ? r\n                : await response[responseFormat]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n            if (cancelToken) {\n                this.abortControllers.delete(cancelToken);\n            }\n            if (!response.ok)\n                throw data;\n            return data;\n        });\n    };\n}\nexports.HttpClient = HttpClient;\n/**\n * @title Vapi API\n * @version 1.0\n * @baseUrl https://api.vapi.ai\n * @contact\n *\n * Voice AI for developers.\n */\nclass Api extends HttpClient {\n    call = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreate\n         * @summary Create Call\n         * @request POST:/call\n         * @secure\n         */\n        callControllerCreate: (data, params = {}) => this.request({\n            path: `/call`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAll\n         * @summary List Calls\n         * @request GET:/call\n         * @secure\n         */\n        callControllerFindAll: (query, params = {}) => this.request({\n            path: `/call`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindOne\n         * @summary Get Call\n         * @request GET:/call/{id}\n         * @secure\n         */\n        callControllerFindOne: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerUpdate\n         * @summary Update Call\n         * @request PATCH:/call/{id}\n         * @secure\n         */\n        callControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerDeleteCallData\n         * @summary Delete Call Data\n         * @request DELETE:/call/{id}\n         * @secure\n         */\n        callControllerDeleteCallData: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreatePhoneCall\n         * @summary Create Phone Call\n         * @request POST:/call/phone\n         * @deprecated\n         * @secure\n         */\n        callControllerCreatePhoneCall: (data, params = {}) => this.request({\n            path: `/call/phone`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreateWebCall\n         * @summary Create Web Call\n         * @request POST:/call/web\n         * @secure\n         */\n        callControllerCreateWebCall: (data, params = {}) => this.request({\n            path: `/call/web`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    v2 = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerExportCalls\n         * @summary Export Calls to CSV\n         * @request GET:/v2/call/export\n         * @secure\n         */\n        callControllerExportCalls: (query, params = {}) => this.request({\n            path: `/v2/call/export`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllPaginated\n         * @summary List Calls\n         * @request GET:/v2/call\n         * @secure\n         */\n        callControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/call`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllMetadataPaginated\n         * @summary List Call Metadata\n         * @request GET:/v2/call/metadata\n         * @secure\n         */\n        callControllerFindAllMetadataPaginated: (query, params = {}) => this.request({\n            path: `/v2/call/metadata`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAllPaginated\n         * @summary List Assistants with pagination\n         * @request GET:/v2/assistant\n         * @secure\n         */\n        assistantControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/assistant`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAllPaginated\n         * @summary List Phone Numbers\n         * @request GET:/v2/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/phone-number`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    chat = {\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerListChats\n         * @summary List Chats\n         * @request GET:/chat\n         * @secure\n         */\n        chatControllerListChats: (query, params = {}) => this.request({\n            path: `/chat`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * @description Creates a new chat. Requires at least one of: assistantId/assistant, sessionId, or previousChatId. Note: sessionId and previousChatId are mutually exclusive.\n         *\n         * @tags Chats\n         * @name ChatControllerCreateChat\n         * @summary Create Chat\n         * @request POST:/chat\n         * @secure\n         */\n        chatControllerCreateChat: (data, params = {}) => this.request({\n            path: `/chat`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerGetChat\n         * @summary Get Chat\n         * @request GET:/chat/{id}\n         * @secure\n         */\n        chatControllerGetChat: (id, params = {}) => this.request({\n            path: `/chat/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerDeleteChat\n         * @summary Delete Chat\n         * @request DELETE:/chat/{id}\n         * @secure\n         */\n        chatControllerDeleteChat: (id, params = {}) => this.request({\n            path: `/chat/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerCreateOpenAiChat\n         * @summary Create Chat (OpenAI Compatible)\n         * @request POST:/chat/responses\n         * @secure\n         */\n        chatControllerCreateOpenAiChat: (data, params = {}) => this.request({\n            path: `/chat/responses`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerCreateWebChat\n         * @summary Create WebChat\n         * @request POST:/chat/web\n         * @secure\n         */\n        chatControllerCreateWebChat: (data, params = {}) => this.request({\n            path: `/chat/web`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chats\n         * @name ChatControllerCreateOpenAiWebChat\n         * @summary Create WebChat (OpenAI Compatible)\n         * @request POST:/chat/web/responses\n         * @secure\n         */\n        chatControllerCreateOpenAiWebChat: (data, params = {}) => this.request({\n            path: `/chat/web/responses`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    campaign = {\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerCreate\n         * @summary Create Campaign\n         * @request POST:/campaign\n         * @secure\n         */\n        campaignControllerCreate: (data, params = {}) => this.request({\n            path: `/campaign`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerFindAll\n         * @summary List Campaigns\n         * @request GET:/campaign\n         * @secure\n         */\n        campaignControllerFindAll: (query, params = {}) => this.request({\n            path: `/campaign`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerFindAllPaginated\n         * @summary List Campaigns with pagination\n         * @request GET:/campaign/paginated\n         * @secure\n         */\n        campaignControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/campaign/paginated`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerFindOne\n         * @summary Get Campaign\n         * @request GET:/campaign/{id}\n         * @secure\n         */\n        campaignControllerFindOne: (id, params = {}) => this.request({\n            path: `/campaign/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerUpdate\n         * @summary Update Campaign\n         * @request PATCH:/campaign/{id}\n         * @secure\n         */\n        campaignControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/campaign/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Campaigns\n         * @name CampaignControllerRemove\n         * @summary Delete Campaign\n         * @request DELETE:/campaign/{id}\n         * @secure\n         */\n        campaignControllerRemove: (id, params = {}) => this.request({\n            path: `/campaign/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    session = {\n        /**\n         * No description\n         *\n         * @tags Sessions\n         * @name SessionControllerCreate\n         * @summary Create Session\n         * @request POST:/session\n         * @secure\n         */\n        sessionControllerCreate: (data, params = {}) => this.request({\n            path: `/session`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Sessions\n         * @name SessionControllerFindAllPaginated\n         * @summary List Sessions\n         * @request GET:/session\n         * @secure\n         */\n        sessionControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/session`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Sessions\n         * @name SessionControllerFindOne\n         * @summary Get Session\n         * @request GET:/session/{id}\n         * @secure\n         */\n        sessionControllerFindOne: (id, params = {}) => this.request({\n            path: `/session/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Sessions\n         * @name SessionControllerUpdate\n         * @summary Update Session\n         * @request PATCH:/session/{id}\n         * @secure\n         */\n        sessionControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/session/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Sessions\n         * @name SessionControllerRemove\n         * @summary Delete Session\n         * @request DELETE:/session/{id}\n         * @secure\n         */\n        sessionControllerRemove: (id, params = {}) => this.request({\n            path: `/session/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    support = {\n        /**\n         * No description\n         *\n         * @tags Support\n         * @name SupportControllerCreateTicket\n         * @summary Create Support Ticket\n         * @request POST:/support/ticket\n         * @secure\n         */\n        supportControllerCreateTicket: (data, params = {}) => this.request({\n            path: `/support/ticket`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    assistant = {\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerCreate\n         * @summary Create Assistant\n         * @request POST:/assistant\n         * @secure\n         */\n        assistantControllerCreate: (data, params = {}) => this.request({\n            path: `/assistant`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAll\n         * @summary List Assistants\n         * @request GET:/assistant\n         * @secure\n         */\n        assistantControllerFindAll: (query, params = {}) => this.request({\n            path: `/assistant`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindOne\n         * @summary Get Assistant\n         * @request GET:/assistant/{id}\n         * @secure\n         */\n        assistantControllerFindOne: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerUpdate\n         * @summary Update Assistant\n         * @request PATCH:/assistant/{id}\n         * @secure\n         */\n        assistantControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerReplace\n         * @summary Replace Assistant\n         * @request PUT:/assistant/{id}\n         * @secure\n         */\n        assistantControllerReplace: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: \"PUT\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerRemove\n         * @summary Delete Assistant\n         * @request DELETE:/assistant/{id}\n         * @secure\n         */\n        assistantControllerRemove: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindVersions\n         * @summary List Assistant Versions\n         * @request GET:/assistant/{id}/version\n         * @secure\n         */\n        assistantControllerFindVersions: (id, query, params = {}) => this.request({\n            path: `/assistant/${id}/version`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    phoneNumber = {\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportTwilio\n         * @summary Import Twilio Number\n         * @request POST:/phone-number/import/twilio\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportTwilio: (data, params = {}) => this.request({\n            path: `/phone-number/import/twilio`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportVonage\n         * @summary Import Vonage Number\n         * @request POST:/phone-number/import/vonage\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportVonage: (data, params = {}) => this.request({\n            path: `/phone-number/import/vonage`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerCreate\n         * @summary Create Phone Number\n         * @request POST:/phone-number\n         * @secure\n         */\n        phoneNumberControllerCreate: (data, params = {}) => this.request({\n            path: `/phone-number`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAll\n         * @summary List Phone Numbers\n         * @request GET:/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAll: (query, params = {}) => this.request({\n            path: `/phone-number`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindOne\n         * @summary Get Phone Number\n         * @request GET:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerFindOne: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerUpdate\n         * @summary Update Phone Number\n         * @request PATCH:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerRemove\n         * @summary Delete Phone Number\n         * @request DELETE:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerRemove: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    tool = {\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerCreate\n         * @summary Create Tool\n         * @request POST:/tool\n         * @secure\n         */\n        toolControllerCreate: (data, params = {}) => this.request({\n            path: `/tool`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindAll\n         * @summary List Tools\n         * @request GET:/tool\n         * @secure\n         */\n        toolControllerFindAll: (query, params = {}) => this.request({\n            path: `/tool`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindOne\n         * @summary Get Tool\n         * @request GET:/tool/{id}\n         * @secure\n         */\n        toolControllerFindOne: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerUpdate\n         * @summary Update Tool\n         * @request PATCH:/tool/{id}\n         * @secure\n         */\n        toolControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerRemove\n         * @summary Delete Tool\n         * @request DELETE:/tool/{id}\n         * @secure\n         */\n        toolControllerRemove: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    file = {\n        /**\n         * @description Use POST /file instead.\n         *\n         * @tags Files\n         * @name FileControllerCreateDeprecated\n         * @summary Upload File\n         * @request POST:/file/upload\n         * @deprecated\n         * @secure\n         */\n        fileControllerCreateDeprecated: (data, params = {}) => this.request({\n            path: `/file/upload`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerCreate\n         * @summary Upload File\n         * @request POST:/file\n         * @secure\n         */\n        fileControllerCreate: (data, params = {}) => this.request({\n            path: `/file`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindAll\n         * @summary List Files\n         * @request GET:/file\n         * @secure\n         */\n        fileControllerFindAll: (params = {}) => this.request({\n            path: `/file`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindOne\n         * @summary Get File\n         * @request GET:/file/{id}\n         * @secure\n         */\n        fileControllerFindOne: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerUpdate\n         * @summary Update File\n         * @request PATCH:/file/{id}\n         * @secure\n         */\n        fileControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerRemove\n         * @summary Delete File\n         * @request DELETE:/file/{id}\n         * @secure\n         */\n        fileControllerRemove: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    knowledgeBase = {\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerCreate\n         * @summary Create Knowledge Base\n         * @request POST:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerCreate: (data, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindAll\n         * @summary List Knowledge Bases\n         * @request GET:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerFindAll: (query, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindOne\n         * @summary Get Knowledge Base\n         * @request GET:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerFindOne: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerUpdate\n         * @summary Update Knowledge Base\n         * @request PATCH:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerRemove\n         * @summary Delete Knowledge Base\n         * @request DELETE:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerRemove: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    workflow = {\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindAll\n         * @summary Get Workflows\n         * @request GET:/workflow\n         * @secure\n         */\n        workflowControllerFindAll: (params = {}) => this.request({\n            path: `/workflow`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerCreate\n         * @summary Create Workflow\n         * @request POST:/workflow\n         * @secure\n         */\n        workflowControllerCreate: (data, params = {}) => this.request({\n            path: `/workflow`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindOne\n         * @summary Get Workflow\n         * @request GET:/workflow/{id}\n         * @secure\n         */\n        workflowControllerFindOne: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerDelete\n         * @summary Delete Workflow\n         * @request DELETE:/workflow/{id}\n         * @secure\n         */\n        workflowControllerDelete: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerUpdate\n         * @summary Update Workflow\n         * @request PATCH:/workflow/{id}\n         * @secure\n         */\n        workflowControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerGenerateFromTranscripts\n         * @summary Generate Workflow JSON from Transcript Files\n         * @request POST:/workflow/generate\n         * @secure\n         */\n        workflowControllerGenerateFromTranscripts: (data, params = {}) => this.request({\n            path: `/workflow/generate`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    squad = {\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerCreate\n         * @summary Create Squad\n         * @request POST:/squad\n         * @secure\n         */\n        squadControllerCreate: (data, params = {}) => this.request({\n            path: `/squad`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindAll\n         * @summary List Squads\n         * @request GET:/squad\n         * @secure\n         */\n        squadControllerFindAll: (query, params = {}) => this.request({\n            path: `/squad`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindOne\n         * @summary Get Squad\n         * @request GET:/squad/{id}\n         * @secure\n         */\n        squadControllerFindOne: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerUpdate\n         * @summary Update Squad\n         * @request PATCH:/squad/{id}\n         * @secure\n         */\n        squadControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerRemove\n         * @summary Delete Squad\n         * @request DELETE:/squad/{id}\n         * @secure\n         */\n        squadControllerRemove: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    testSuite = {\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindAllPaginated\n         * @summary List Test Suites\n         * @request GET:/test-suite\n         * @secure\n         */\n        testSuiteControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/test-suite`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerCreate\n         * @summary Create Test Suite\n         * @request POST:/test-suite\n         * @secure\n         */\n        testSuiteControllerCreate: (data, params = {}) => this.request({\n            path: `/test-suite`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindOne\n         * @summary Get Test Suite\n         * @request GET:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerFindOne: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerUpdate\n         * @summary Update Test Suite\n         * @request PATCH:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerRemove\n         * @summary Delete Test Suite\n         * @request DELETE:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerRemove: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindAllPaginated\n         * @summary List Tests\n         * @request GET:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerCreate\n         * @summary Create Test\n         * @request POST:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindOne\n         * @summary Get Test\n         * @request GET:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerUpdate\n         * @summary Update Test\n         * @request PATCH:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerRemove\n         * @summary Delete Test\n         * @request DELETE:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindAllPaginated\n         * @summary List Test Suite Runs\n         * @request GET:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerCreate\n         * @summary Create Test Suite Run\n         * @request POST:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindOne\n         * @summary Get Test Suite Run\n         * @request GET:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerUpdate\n         * @summary Update Test Suite Run\n         * @request PATCH:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerRemove\n         * @summary Delete Test Suite Run\n         * @request DELETE:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    analytics = {\n        /**\n         * No description\n         *\n         * @tags Analytics\n         * @name AnalyticsControllerQuery\n         * @summary Create Analytics Queries\n         * @request POST:/analytics\n         * @secure\n         */\n        analyticsControllerQuery: (data, params = {}) => this.request({\n            path: `/analytics`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    log = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsQuery\n         * @summary Get Call Logs\n         * @request GET:/log\n         * @secure\n         */\n        loggingControllerCallLogsQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsDeleteQuery\n         * @summary Delete Call Logs\n         * @request DELETE:/log\n         * @secure\n         */\n        loggingControllerCallLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: \"DELETE\",\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    logs = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsQuery\n         * @summary Get Logs\n         * @request GET:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsDeleteQuery\n         * @summary Delete Logs\n         * @request DELETE:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: \"DELETE\",\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    org = {\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerCreate\n         * @summary Create Org\n         * @request POST:/org\n         * @secure\n         */\n        orgControllerCreate: (data, params = {}) => this.request({\n            path: `/org`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAll\n         * @summary List Orgs\n         * @request GET:/org\n         * @secure\n         */\n        orgControllerFindAll: (params = {}) => this.request({\n            path: `/org`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindOne\n         * @summary Get Org\n         * @request GET:/org/{id}\n         * @secure\n         */\n        orgControllerFindOne: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUpdate\n         * @summary Update Org\n         * @request PATCH:/org/{id}\n         * @secure\n         */\n        orgControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerDeleteOrg\n         * @summary Delete Org\n         * @request DELETE:/org/{id}\n         * @secure\n         */\n        orgControllerDeleteOrg: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAllUsers\n         * @summary List Users\n         * @request GET:/org/{id}/user\n         * @secure\n         */\n        orgControllerFindAllUsers: (id, params = {}) => this.request({\n            path: `/org/${id}/user`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgLeave\n         * @summary Leave Org\n         * @request DELETE:/org/{id}/leave\n         * @secure\n         */\n        orgControllerOrgLeave: (id, params = {}) => this.request({\n            path: `/org/${id}/leave`,\n            method: \"DELETE\",\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgRemoveUser\n         * @summary Remove Org Member\n         * @request DELETE:/org/{id}/member/{memberId}/leave\n         * @secure\n         */\n        orgControllerOrgRemoveUser: (id, memberId, params = {}) => this.request({\n            path: `/org/${id}/member/${memberId}/leave`,\n            method: \"DELETE\",\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUsersInvite\n         * @summary Invite User\n         * @request POST:/org/{id}/invite\n         * @secure\n         */\n        orgControllerUsersInvite: (id, data, params = {}) => this.request({\n            path: `/org/${id}/invite`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUserUpdate\n         * @summary Update User Role\n         * @request PATCH:/org/{id}/role\n         * @secure\n         */\n        orgControllerUserUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}/role`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgToken\n         * @summary Generate User Org JWT\n         * @request GET:/org/{id}/auth\n         * @secure\n         */\n        orgControllerOrgToken: (id, params = {}) => this.request({\n            path: `/org/${id}/auth`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    token = {\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerCreate\n         * @summary Create Token\n         * @request POST:/token\n         * @secure\n         */\n        tokenControllerCreate: (data, params = {}) => this.request({\n            path: `/token`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindAll\n         * @summary List Tokens\n         * @request GET:/token\n         * @secure\n         */\n        tokenControllerFindAll: (query, params = {}) => this.request({\n            path: `/token`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindOne\n         * @summary Get Token\n         * @request GET:/token/{id}\n         * @secure\n         */\n        tokenControllerFindOne: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerUpdate\n         * @summary Update Token\n         * @request PATCH:/token/{id}\n         * @secure\n         */\n        tokenControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerRemove\n         * @summary Delete Token\n         * @request DELETE:/token/{id}\n         * @secure\n         */\n        tokenControllerRemove: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    credential = {\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerCreate\n         * @summary Create Credential\n         * @request POST:/credential\n         * @secure\n         */\n        credentialControllerCreate: (data, params = {}) => this.request({\n            path: `/credential`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindAll\n         * @summary List Credentials\n         * @request GET:/credential\n         * @secure\n         */\n        credentialControllerFindAll: (query, params = {}) => this.request({\n            path: `/credential`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindOne\n         * @summary Get Credential\n         * @request GET:/credential/{id}\n         * @secure\n         */\n        credentialControllerFindOne: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerUpdate\n         * @summary Update Credential\n         * @request PATCH:/credential/{id}\n         * @secure\n         */\n        credentialControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerRemove\n         * @summary Delete Credential\n         * @request DELETE:/credential/{id}\n         * @secure\n         */\n        credentialControllerRemove: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerGenerateSession\n         * @summary Generate a credential session\n         * @request POST:/credential/session\n         * @secure\n         */\n        credentialControllerGenerateSession: (data, params = {}) => this.request({\n            path: `/credential/session`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerHandleWebhook\n         * @summary Handle credential webhook\n         * @request POST:/credential/webhook\n         */\n        credentialControllerHandleWebhook: (data, params = {}) => this.request({\n            path: `/credential/webhook`,\n            method: \"POST\",\n            body: data,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerCredentialActionTrigger\n         * @summary Trigger a credential action\n         * @request POST:/credential/trigger\n         * @secure\n         */\n        credentialControllerCredentialActionTrigger: (data, params = {}) => this.request({\n            path: `/credential/trigger`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n    };\n    template = {\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerCreate\n         * @summary Create Template\n         * @request POST:/template\n         * @secure\n         */\n        templateControllerCreate: (data, params = {}) => this.request({\n            path: `/template`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAll\n         * @summary List Templates\n         * @request GET:/template\n         * @secure\n         */\n        templateControllerFindAll: (query, params = {}) => this.request({\n            path: `/template`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAllPinned\n         * @summary List Templates\n         * @request GET:/template/pinned\n         * @secure\n         */\n        templateControllerFindAllPinned: (params = {}) => this.request({\n            path: `/template/pinned`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindOne\n         * @summary Get Template\n         * @request GET:/template/{id}\n         * @secure\n         */\n        templateControllerFindOne: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerUpdate\n         * @summary Update Template\n         * @request PATCH:/template/{id}\n         * @secure\n         */\n        templateControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: \"PATCH\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerRemove\n         * @summary Delete Template\n         * @request DELETE:/template/{id}\n         * @secure\n         */\n        templateControllerRemove: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: \"DELETE\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    voiceLibrary = {\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetByProvider\n         * @summary Get voices in Voice Library by Provider\n         * @request GET:/voice-library/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetByProvider: (provider, query, params = {}) => this.request({\n            path: `/voice-library/${provider}`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetAccentsByProvider\n         * @summary Get accents in Voice Library by Provider\n         * @request GET:/voice-library/{provider}/accents\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetAccentsByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/${provider}/accents`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncByProvider\n         * @summary Sync Private voices in Voice Library by Provider\n         * @request POST:/voice-library/sync/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/sync/${provider}`,\n            method: \"POST\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncDefaultVoices\n         * @summary Sync Default voices in Voice Library by Providers\n         * @request POST:/voice-library/sync\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncDefaultVoices: (data, params = {}) => this.request({\n            path: `/voice-library/sync`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibraryCreateSesameVoice\n         * @summary Create a new voice in the Voice Library using Sesame\n         * @request POST:/voice-library/create-sesame-voice\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibraryCreateSesameVoice: (data, params = {}) => this.request({\n            path: `/voice-library/create-sesame-voice`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n    };\n    provider = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflows\n         * @request GET:/{provider}/workflows\n         * @secure\n         */\n        providerControllerGetWorkflows: (provider, query, params = {}) => this.request({\n            path: `/${provider}/workflows`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflowTriggerHook\n         * @request GET:/{provider}/workflows/{workflowId}/hooks\n         * @secure\n         */\n        providerControllerGetWorkflowTriggerHook: (provider, workflowId, params = {}) => this.request({\n            path: `/${provider}/workflows/${workflowId}/hooks`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetLocations\n         * @request GET:/{provider}/locations\n         * @secure\n         */\n        providerControllerGetLocations: (provider, params = {}) => this.request({\n            path: `/${provider}/locations`,\n            method: \"GET\",\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoices\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voices/search\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerSearchVoices: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voices/search`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoice\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voice/search\n         * @secure\n         */\n        voiceProviderControllerSearchVoice: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voice/search`,\n            method: \"GET\",\n            query: query,\n            secure: true,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoices\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voices/add\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerAddVoices: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voices/add`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoice\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voice/add\n         * @secure\n         */\n        voiceProviderControllerAddVoice: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voice/add`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: \"json\",\n            ...params,\n        }),\n    };\n    v11Labs = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerCloneVoices\n         * @summary Clone a voice to the provider account and add to Vapi Voice Library.\n         * @request POST:/11labs/voice/clone\n         * @secure\n         */\n        voiceProviderControllerCloneVoices: (data, params = {}) => this.request({\n            path: `/11labs/voice/clone`,\n            method: \"POST\",\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            ...params,\n        }),\n    };\n}\nexports.Api = Api;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/client.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/client.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.client = void 0;\nconst api_1 = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/api.js\");\nconst api = new api_1.Api({\n    baseUrl: \"https://api.vapi.ai\",\n    baseApiParams: {\n        secure: true,\n    },\n    securityWorker: async (securityData) => {\n        if (securityData) {\n            return {\n                headers: {\n                    Authorization: `Bearer ${securityData}`,\n                },\n            };\n        }\n    },\n});\nexports.client = api;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZhcGktYWkrd2ViQDIuMy44L25vZGVfbW9kdWxlcy9AdmFwaS1haS93ZWIvZGlzdC9jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGNBQWMsbUJBQU8sQ0FBQyxrR0FBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxhQUFhO0FBQzFELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCxjQUFjIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluXFxEZXNrdG9wXFxGaW5hbFByb2plY3RcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEB2YXBpLWFpK3dlYkAyLjMuOFxcbm9kZV9tb2R1bGVzXFxAdmFwaS1haVxcd2ViXFxkaXN0XFxjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGFwaV8xID0gcmVxdWlyZShcIi4vYXBpXCIpO1xuY29uc3QgYXBpID0gbmV3IGFwaV8xLkFwaSh7XG4gICAgYmFzZVVybDogXCJodHRwczovL2FwaS52YXBpLmFpXCIsXG4gICAgYmFzZUFwaVBhcmFtczoge1xuICAgICAgICBzZWN1cmU6IHRydWUsXG4gICAgfSxcbiAgICBzZWN1cml0eVdvcmtlcjogYXN5bmMgKHNlY3VyaXR5RGF0YSkgPT4ge1xuICAgICAgICBpZiAoc2VjdXJpdHlEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3NlY3VyaXR5RGF0YX1gLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbn0pO1xuZXhwb3J0cy5jbGllbnQgPSBhcGk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/vapi.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/vapi.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst daily_js_1 = __importDefault(__webpack_require__(/*! @daily-co/daily-js */ \"(ssr)/./node_modules/.pnpm/@daily-co+daily-js@0.80.0/node_modules/@daily-co/daily-js/dist/daily-esm.js\"));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/client.js\");\nasync function startAudioPlayer(player, track) {\n    player.muted = false;\n    player.autoplay = true;\n    if (track != null) {\n        player.srcObject = new MediaStream([track]);\n        await player.play();\n    }\n}\nasync function buildAudioPlayer(track, participantId) {\n    const player = document.createElement('audio');\n    player.dataset.participantId = participantId;\n    document.body.appendChild(player);\n    await startAudioPlayer(player, track);\n    return player;\n}\nfunction destroyAudioPlayer(participantId) {\n    const player = document.querySelector(`audio[data-participant-id=\"${participantId}\"]`);\n    player?.remove();\n}\nfunction subscribeToTracks(e, call, isVideoRecordingEnabled, isVideoEnabled) {\n    if (e.participant.local)\n        return;\n    call.updateParticipant(e.participant.session_id, {\n        setSubscribedTracks: {\n            audio: true,\n            video: isVideoRecordingEnabled || isVideoEnabled,\n        },\n    });\n}\nclass VapiEventEmitter extends events_1.default {\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        super.once(event, listener);\n        return this;\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n    removeListener(event, listener) {\n        super.removeListener(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        super.removeAllListeners(event);\n        return this;\n    }\n}\nclass Vapi extends VapiEventEmitter {\n    started = false;\n    call = null;\n    speakingTimeout = null;\n    dailyCallConfig = {};\n    dailyCallObject = {};\n    hasEmittedCallEndedStatus = false;\n    constructor(apiToken, apiBaseUrl, dailyCallConfig, dailyCallObject) {\n        super();\n        client_1.client.baseUrl = apiBaseUrl ?? 'https://api.vapi.ai';\n        client_1.client.setSecurityData(apiToken);\n        this.dailyCallConfig = dailyCallConfig ?? {};\n        this.dailyCallObject = dailyCallObject ?? {};\n    }\n    cleanup() {\n        this.started = false;\n        this.hasEmittedCallEndedStatus = false;\n        this.call?.destroy();\n        this.call = null;\n        this.speakingTimeout = null;\n    }\n    isMobileDevice() {\n        if (typeof navigator === 'undefined') {\n            return false;\n        }\n        const userAgent = navigator.userAgent;\n        return /android|iphone|ipad|ipod|iemobile|blackberry|bada/i.test(userAgent.toLowerCase());\n    }\n    async sleep(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n    async start(assistant, assistantOverrides, squad, workflow, workflowOverrides) {\n        const startTime = Date.now();\n        // Input validation with detailed error messages\n        if (!assistant && !squad && !workflow) {\n            const error = new Error('Assistant or Squad or Workflow must be provided.');\n            this.emit('error', {\n                type: 'validation-error',\n                stage: 'input-validation',\n                message: error.message,\n                timestamp: new Date().toISOString()\n            });\n            throw error;\n        }\n        if (this.started) {\n            this.emit('call-start-progress', {\n                stage: 'validation',\n                status: 'failed',\n                timestamp: new Date().toISOString(),\n                metadata: { reason: 'already-started' }\n            });\n            return null;\n        }\n        this.emit('call-start-progress', {\n            stage: 'initialization',\n            status: 'started',\n            timestamp: new Date().toISOString(),\n            metadata: {\n                hasAssistant: !!assistant,\n                hasSquad: !!squad,\n                hasWorkflow: !!workflow\n            }\n        });\n        this.started = true;\n        try {\n            // Stage 1: Create web call\n            this.emit('call-start-progress', {\n                stage: 'web-call-creation',\n                status: 'started',\n                timestamp: new Date().toISOString()\n            });\n            const webCallStartTime = Date.now();\n            const webCall = (await client_1.client.call.callControllerCreateWebCall({\n                assistant: typeof assistant === 'string' ? undefined : assistant,\n                assistantId: typeof assistant === 'string' ? assistant : undefined,\n                assistantOverrides,\n                squad: typeof squad === 'string' ? undefined : squad,\n                squadId: typeof squad === 'string' ? squad : undefined,\n                workflow: typeof workflow === 'string' ? undefined : workflow,\n                workflowId: typeof workflow === 'string' ? workflow : undefined,\n                workflowOverrides,\n            })).data;\n            const webCallDuration = Date.now() - webCallStartTime;\n            this.emit('call-start-progress', {\n                stage: 'web-call-creation',\n                status: 'completed',\n                duration: webCallDuration,\n                timestamp: new Date().toISOString(),\n                metadata: {\n                    callId: webCall?.id || 'unknown',\n                    videoRecordingEnabled: webCall?.artifactPlan?.videoRecordingEnabled ?? false,\n                    voiceProvider: webCall?.assistant?.voice?.provider || 'unknown'\n                }\n            });\n            if (this.call) {\n                this.emit('call-start-progress', {\n                    stage: 'daily-call-object-creation',\n                    status: 'started',\n                    timestamp: new Date().toISOString(),\n                    metadata: { action: 'cleanup-existing' }\n                });\n                this.cleanup();\n            }\n            const isVideoRecordingEnabled = webCall?.artifactPlan?.videoRecordingEnabled ?? false;\n            const isVideoEnabled = webCall?.assistant?.voice?.provider === 'tavus';\n            // Stage 2: Create Daily call object\n            this.emit('call-start-progress', {\n                stage: 'daily-call-object-creation',\n                status: 'started',\n                timestamp: new Date().toISOString(),\n                metadata: {\n                    audioSource: this.dailyCallObject.audioSource ?? true,\n                    videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,\n                    isVideoRecordingEnabled,\n                    isVideoEnabled\n                }\n            });\n            const dailyCallStartTime = Date.now();\n            try {\n                this.call = daily_js_1.default.createCallObject({\n                    audioSource: this.dailyCallObject.audioSource ?? true,\n                    videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,\n                    dailyConfig: this.dailyCallConfig,\n                });\n                const dailyCallDuration = Date.now() - dailyCallStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'daily-call-object-creation',\n                    status: 'completed',\n                    duration: dailyCallDuration,\n                    timestamp: new Date().toISOString()\n                });\n            }\n            catch (error) {\n                const dailyCallDuration = Date.now() - dailyCallStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'daily-call-object-creation',\n                    status: 'failed',\n                    duration: dailyCallDuration,\n                    timestamp: new Date().toISOString(),\n                    metadata: { error: error?.toString() }\n                });\n                this.emit('error', {\n                    type: 'daily-call-object-creation-error',\n                    stage: 'daily-call-object-creation',\n                    error,\n                    timestamp: new Date().toISOString()\n                });\n                throw error;\n            }\n            this.call.iframe()?.style.setProperty('display', 'none');\n            this.call.on('left-meeting', () => {\n                this.emit('call-end');\n                if (!this.hasEmittedCallEndedStatus) {\n                    this.emit('message', {\n                        type: 'status-update',\n                        status: 'ended',\n                        'endedReason': 'customer-ended-call',\n                    });\n                    this.hasEmittedCallEndedStatus = true;\n                }\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n                this.cleanup();\n            });\n            this.call.on('error', (error) => {\n                this.emit('error', error);\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n            });\n            this.call.on('camera-error', (error) => {\n                this.emit('camera-error', error);\n            });\n            this.call.on('network-quality-change', (event) => {\n                this.emit('network-quality-change', event);\n            });\n            this.call.on('network-connection', (event) => {\n                this.emit('network-connection', event);\n            });\n            this.call.on('track-started', async (e) => {\n                if (!e || !e.participant) {\n                    return;\n                }\n                if (e.participant?.local) {\n                    return;\n                }\n                if (e.participant?.user_name !== 'Vapi Speaker') {\n                    return;\n                }\n                if (e.track.kind === 'video') {\n                    this.emit('video', e.track);\n                }\n                if (e.track.kind === 'audio') {\n                    await buildAudioPlayer(e.track, e.participant.session_id);\n                }\n                this.call?.sendAppMessage('playable');\n            });\n            this.call.on('participant-joined', (e) => {\n                if (!e || !this.call)\n                    return;\n                subscribeToTracks(e, this.call, isVideoRecordingEnabled, isVideoEnabled);\n            });\n            this.call.on('participant-updated', (e) => {\n                if (!e) {\n                    return;\n                }\n                this.emit('daily-participant-updated', e.participant);\n            });\n            this.call.on('participant-left', (e) => {\n                if (!e) {\n                    return;\n                }\n                destroyAudioPlayer(e.participant.session_id);\n            });\n            // Stage 3: Mobile device handling and permissions\n            const isMobile = this.isMobileDevice();\n            this.emit('call-start-progress', {\n                stage: 'mobile-permissions',\n                status: 'started',\n                timestamp: new Date().toISOString(),\n                metadata: { isMobile }\n            });\n            if (isMobile) {\n                const mobileWaitStartTime = Date.now();\n                await this.sleep(1000);\n                const mobileWaitDuration = Date.now() - mobileWaitStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'mobile-permissions',\n                    status: 'completed',\n                    duration: mobileWaitDuration,\n                    timestamp: new Date().toISOString(),\n                    metadata: { action: 'permissions-wait' }\n                });\n            }\n            else {\n                this.emit('call-start-progress', {\n                    stage: 'mobile-permissions',\n                    status: 'completed',\n                    timestamp: new Date().toISOString(),\n                    metadata: { action: 'skipped-not-mobile' }\n                });\n            }\n            // Stage 4: Join the call\n            this.emit('call-start-progress', {\n                stage: 'daily-call-join',\n                status: 'started',\n                timestamp: new Date().toISOString()\n            });\n            const joinStartTime = Date.now();\n            try {\n                await this.call.join({\n                    // @ts-expect-error This exists\n                    url: webCall.webCallUrl,\n                    subscribeToTracksAutomatically: false,\n                });\n                const joinDuration = Date.now() - joinStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'daily-call-join',\n                    status: 'completed',\n                    duration: joinDuration,\n                    timestamp: new Date().toISOString()\n                });\n            }\n            catch (error) {\n                const joinDuration = Date.now() - joinStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'daily-call-join',\n                    status: 'failed',\n                    duration: joinDuration,\n                    timestamp: new Date().toISOString(),\n                    metadata: { error: error?.toString() }\n                });\n                this.emit('error', {\n                    type: 'daily-call-join-error',\n                    stage: 'daily-call-join',\n                    error,\n                    duration: joinDuration,\n                    timestamp: new Date().toISOString()\n                });\n                throw error;\n            }\n            // Stage 5: Video recording setup (if enabled)\n            if (isVideoRecordingEnabled) {\n                this.emit('call-start-progress', {\n                    stage: 'video-recording-setup',\n                    status: 'started',\n                    timestamp: new Date().toISOString()\n                });\n                const recordingRequestedTime = new Date().getTime();\n                const recordingStartTime = Date.now();\n                try {\n                    this.call.startRecording({\n                        width: 1280,\n                        height: 720,\n                        backgroundColor: '#FF1F2D3D',\n                        layout: {\n                            preset: 'default',\n                        },\n                    });\n                    const recordingSetupDuration = Date.now() - recordingStartTime;\n                    this.emit('call-start-progress', {\n                        stage: 'video-recording-setup',\n                        status: 'completed',\n                        duration: recordingSetupDuration,\n                        timestamp: new Date().toISOString()\n                    });\n                    this.call.on('recording-started', () => {\n                        const totalRecordingDelay = (new Date().getTime() - recordingRequestedTime) / 1000;\n                        this.emit('call-start-progress', {\n                            stage: 'video-recording-started',\n                            status: 'completed',\n                            timestamp: new Date().toISOString(),\n                            metadata: { delaySeconds: totalRecordingDelay }\n                        });\n                        this.send({\n                            type: 'control',\n                            control: 'say-first-message',\n                            videoRecordingStartDelaySeconds: totalRecordingDelay,\n                        });\n                    });\n                }\n                catch (error) {\n                    const recordingSetupDuration = Date.now() - recordingStartTime;\n                    this.emit('call-start-progress', {\n                        stage: 'video-recording-setup',\n                        status: 'failed',\n                        duration: recordingSetupDuration,\n                        timestamp: new Date().toISOString(),\n                        metadata: { error: error?.toString() }\n                    });\n                    this.emit('error', {\n                        type: 'video-recording-setup-error',\n                        stage: 'video-recording-setup',\n                        error,\n                        timestamp: new Date().toISOString()\n                    });\n                    // Don't throw here, video recording is optional\n                }\n            }\n            else {\n                this.emit('call-start-progress', {\n                    stage: 'video-recording-setup',\n                    status: 'completed',\n                    timestamp: new Date().toISOString(),\n                    metadata: { action: 'skipped-not-enabled' }\n                });\n            }\n            // Stage 6: Audio level observer setup\n            this.emit('call-start-progress', {\n                stage: 'audio-observer-setup',\n                status: 'started',\n                timestamp: new Date().toISOString()\n            });\n            const audioObserverStartTime = Date.now();\n            try {\n                this.call.startRemoteParticipantsAudioLevelObserver(100);\n                const audioObserverDuration = Date.now() - audioObserverStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'audio-observer-setup',\n                    status: 'completed',\n                    duration: audioObserverDuration,\n                    timestamp: new Date().toISOString()\n                });\n            }\n            catch (error) {\n                const audioObserverDuration = Date.now() - audioObserverStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'audio-observer-setup',\n                    status: 'failed',\n                    duration: audioObserverDuration,\n                    timestamp: new Date().toISOString(),\n                    metadata: { error: error?.toString() }\n                });\n                this.emit('error', {\n                    type: 'audio-observer-setup-error',\n                    stage: 'audio-observer-setup',\n                    error,\n                    timestamp: new Date().toISOString()\n                });\n                // Don't throw here, this is non-critical\n            }\n            this.call.on('remote-participants-audio-level', (e) => {\n                if (e)\n                    this.handleRemoteParticipantsAudioLevel(e);\n            });\n            this.call.on('app-message', (e) => this.onAppMessage(e));\n            this.call.on('nonfatal-error', (e) => {\n                // https://docs.daily.co/reference/daily-js/events/meeting-events#type-audio-processor-error\n                if (e?.type === 'audio-processor-error') {\n                    this.call\n                        ?.updateInputSettings({\n                        audio: {\n                            processor: {\n                                type: 'none',\n                            },\n                        },\n                    })\n                        .then(() => {\n                        this.call?.setLocalAudio(true);\n                    });\n                }\n            });\n            // Stage 7: Audio processing setup\n            this.emit('call-start-progress', {\n                stage: 'audio-processing-setup',\n                status: 'started',\n                timestamp: new Date().toISOString()\n            });\n            const audioProcessingStartTime = Date.now();\n            try {\n                this.call.updateInputSettings({\n                    audio: {\n                        processor: {\n                            type: 'noise-cancellation',\n                        },\n                    },\n                });\n                const audioProcessingDuration = Date.now() - audioProcessingStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'audio-processing-setup',\n                    status: 'completed',\n                    duration: audioProcessingDuration,\n                    timestamp: new Date().toISOString()\n                });\n            }\n            catch (error) {\n                const audioProcessingDuration = Date.now() - audioProcessingStartTime;\n                this.emit('call-start-progress', {\n                    stage: 'audio-processing-setup',\n                    status: 'failed',\n                    duration: audioProcessingDuration,\n                    timestamp: new Date().toISOString(),\n                    metadata: { error: error?.toString() }\n                });\n                this.emit('error', {\n                    type: 'audio-processing-setup-error',\n                    stage: 'audio-processing-setup',\n                    error,\n                    timestamp: new Date().toISOString()\n                });\n                // Don't throw here, this is non-critical\n            }\n            const totalDuration = Date.now() - startTime;\n            this.emit('call-start-success', {\n                totalDuration,\n                callId: webCall?.id || 'unknown',\n                timestamp: new Date().toISOString()\n            });\n            return webCall;\n        }\n        catch (e) {\n            const totalDuration = Date.now() - startTime;\n            this.emit('call-start-failed', {\n                stage: 'unknown',\n                totalDuration,\n                error: e?.toString() || 'Unknown error occurred',\n                errorStack: e instanceof Error ? e.stack : 'No stack trace available',\n                timestamp: new Date().toISOString(),\n                context: {\n                    hasAssistant: !!assistant,\n                    hasSquad: !!squad,\n                    hasWorkflow: !!workflow,\n                    isMobile: this.isMobileDevice()\n                }\n            });\n            // Also emit the generic error event for backward compatibility\n            this.emit('error', {\n                type: 'start-method-error',\n                stage: 'unknown',\n                error: e,\n                totalDuration,\n                timestamp: new Date().toISOString(),\n                context: {\n                    hasAssistant: !!assistant,\n                    hasSquad: !!squad,\n                    hasWorkflow: !!workflow,\n                    isMobile: this.isMobileDevice()\n                }\n            });\n            this.cleanup();\n            return null;\n        }\n    }\n    onAppMessage(e) {\n        if (!e) {\n            return;\n        }\n        try {\n            if (e.data === 'listening') {\n                return this.emit('call-start');\n            }\n            else {\n                try {\n                    const parsedMessage = JSON.parse(e.data);\n                    this.emit('message', parsedMessage);\n                    if (parsedMessage && 'type' in parsedMessage && 'status' in parsedMessage && parsedMessage.type === 'status-update' && parsedMessage.status === 'ended') {\n                        this.hasEmittedCallEndedStatus = true;\n                    }\n                }\n                catch (parseError) {\n                    console.log('Error parsing message data: ', parseError);\n                }\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    handleRemoteParticipantsAudioLevel(e) {\n        const speechLevel = Object.values(e.participantsAudioLevel).reduce((a, b) => a + b, 0);\n        this.emit('volume-level', Math.min(1, speechLevel / 0.15));\n        const isSpeaking = speechLevel > 0.01;\n        if (!isSpeaking) {\n            return;\n        }\n        if (this.speakingTimeout) {\n            clearTimeout(this.speakingTimeout);\n            this.speakingTimeout = null;\n        }\n        else {\n            this.emit('speech-start');\n        }\n        this.speakingTimeout = setTimeout(() => {\n            this.emit('speech-end');\n            this.speakingTimeout = null;\n        }, 1000);\n    }\n    stop() {\n        this.started = false;\n        this.call?.destroy();\n        this.call = null;\n    }\n    send(message) {\n        this.call?.sendAppMessage(JSON.stringify(message));\n    }\n    setMuted(mute) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        this.call.setLocalAudio(!mute);\n    }\n    isMuted() {\n        if (!this.call) {\n            return false;\n        }\n        return this.call.localAudio() === false;\n    }\n    say(message, endCallAfterSpoken, interruptionsEnabled, interruptAssistantEnabled) {\n        this.send({\n            type: 'say',\n            message,\n            endCallAfterSpoken,\n            interruptionsEnabled: interruptionsEnabled ?? false,\n            interruptAssistantEnabled: interruptAssistantEnabled ?? false,\n        });\n    }\n    setInputDevicesAsync(options) {\n        this.call?.setInputDevicesAsync(options);\n    }\n    async increaseMicLevel(gain) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const audioContext = new AudioContext();\n            const source = audioContext.createMediaStreamSource(stream);\n            const gainNode = audioContext.createGain();\n            gainNode.gain.value = gain;\n            source.connect(gainNode);\n            const destination = audioContext.createMediaStreamDestination();\n            gainNode.connect(destination);\n            const [boostedTrack] = destination.stream.getAudioTracks();\n            await this.call.setInputDevicesAsync({ audioSource: boostedTrack });\n        }\n        catch (error) {\n            console.error(\"Error adjusting microphone level:\", error);\n        }\n    }\n    setOutputDeviceAsync(options) {\n        this.call?.setOutputDeviceAsync(options);\n    }\n    getDailyCallObject() {\n        return this.call;\n    }\n    startScreenSharing(displayMediaOptions, screenVideoSendSettings) {\n        this.call?.startScreenShare({\n            displayMediaOptions,\n            screenVideoSendSettings,\n        });\n    }\n    stopScreenSharing() {\n        this.call?.stopScreenShare();\n    }\n}\nexports[\"default\"] = Vapi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@vapi-ai+web@2.3.8/node_modules/@vapi-ai/web/dist/vapi.js\n");

/***/ })

};
;